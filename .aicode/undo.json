[{"tool_name":"change_file","file_path":"test/commands/do/do_merge_test.dart","file_content":"// @license\n// Copyright (c) 2025 Göran Hegenberg. All Rights Reserved.\n//\n// Use of this source code is governed by terms that can be\n// found in the LICENSE file in the root of this package.\n\nimport 'dart:io';\nimport 'package:gg/gg.dart';\nimport 'package:gg_git/gg_git_test_helpers.dart';\nimport 'package:gg_merge/gg_merge.dart' as gg_merge;\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  late Directory d;\n  late MockCanMerge canMerge;\n  late gg_merge.MockDoMerge merge;\n  late DoMerge doMerge;\n  final messages = <String>[];\n  final ggLog = messages.add;\n\n  setUp(() async {\n    d = await Directory.systemTemp.createTemp('do_merge');\n    await initGit(d); // Ensure d is a git repo\n    registerFallbackValue(d);\n    canMerge = MockCanMerge();\n    merge = gg_merge.MockDoMerge();\n    when(() => canMerge.exec(directory: d, ggLog: ggLog)).thenAnswer((_) async {\n      messages.add('check allowed');\n      return;\n    });\n    when(\n      () => merge.get(directory: d, ggLog: ggLog, automerge: false),\n    ).thenAnswer((_) async {\n      messages.add('do merge!');\n      messages.add('✅ Merge operation successfully started.');\n      return true;\n    });\n\n    doMerge = DoMerge(ggLog: ggLog, canMerge: canMerge, doMerge: merge);\n    messages.clear();\n  });\n\n  tearDown(() async {\n    await d.delete(recursive: true);\n  });\n\n  group('DoMerge', () {\n    test('should call canMerge and then doMerge', () async {\n      await doMerge.exec(directory: d, ggLog: ggLog);\n      expect(messages, contains('check allowed'));\n      expect(messages, contains('do merge!'));\n      expect(\n        messages.any(\n          (m) => m.contains('✅ Merge operation successfully started.'),\n        ),\n        isTrue,\n      );\n    });\n\n    test('should propagate errors from canMerge', () async {\n      when(\n        () => canMerge.exec(directory: d, ggLog: ggLog),\n      ).thenThrow(Exception('not allowed'));\n      late String error;\n      try {\n        await doMerge.exec(directory: d, ggLog: ggLog);\n      } catch (e) {\n        error = e.toString();\n      }\n      expect(error, contains('not allowed'));\n    });\n\n    test('should delegate automerge flag to _doMerge', () async {\n      when(\n        () => merge.get(directory: d, ggLog: ggLog, automerge: true),\n      ).thenAnswer((_) async {\n        messages.add('do automerge merge!');\n        return true;\n      });\n      // Ensure git repo before use:\n      await initGit(d);\n      await doMerge.get(directory: d, ggLog: ggLog, automerge: true);\n      expect(messages, contains('do automerge merge!'));\n    });\n\n    test('default constructor uses correct name and description', () {\n      final doMerge = DoMerge(ggLog: ggLog);\n      expect(doMerge.name, 'merge');\n      expect(\n        doMerge.description,\n        'Checks and performs merge/Pull-Request to main.',\n      );\n    });\n  });\n}\n"}]